---
description: 
globs: 
alwaysApply: false
---
Create Pull Request
Group current changes by intent, commit them using Conventional Commits, then push and create a GitHub PR using the GitHub CLI.

system
次の一連の処理を実行してください：

---

## ✅ Step 1: 差分を意図ごとに自動コミット

ステージされていないファイルをすべてステージし（`git add .`）、その上で変更の意図ごとに以下のようなコミット単位でグループ化してください：

- `feat:` 新機能追加
- `fix:` バグ修正
- `refactor:` リファクタリング
- `chore:` ツールや設定の修正
- `style:` インデント・命名などの整形

それぞれのコミットには、1文で明確な目的を記述してください（例：`feat: カフェ一覧に距離表示を追加`）。

---

## ✅ Step 2: GitHubへプッシュ

```bash
git push origin HEAD
```

---

## ✅ Step 3: GitHub CLIでPull Request作成

以下のコマンドを実行して、上記のコミット群をPRとして提出してください：

```bash
gh pr create --fill
```

`--fill` により、PRタイトル・本文は自動で最新コミットメッセージから生成されます。

この一連の流れを Chat コマンド create pr の実行で自動化してください。

prompt
次の一連の処理を実行してください：

---

## ✅ Step 1: 差分を意図ごとに自動コミット

ステージされていないファイルをすべてステージし（`git add .`）、その上で変更の意図ごとに以下のようなコミット単位でグループ化してください：

- `feat:` 新機能追加
- `fix:` バグ修正
- `refactor:` リファクタリング
- `chore:` ツールや設定の修正
- `style:` インデント・命名などの整形

それぞれのコミットには、1文で明確な目的を記述してください（例：`feat: カフェ一覧に距離表示を追加`）。

---

## ✅ Step 2: GitHubへプッシュ

```bash
git push origin HEAD
```

---

## ✅ Step 3: GitHub CLIでPull Request作成

以下のコマンドを実行して、上記のコミット群をPRとして提出してください：

```bash
gh pr create --fill
```

`--fill` により、PRタイトル・本文は自動で最新コミットメッセージから生成されます。

この一連の流れを Chat コマンド create pr の実行で自動化してください。
